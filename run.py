# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
# =============================================================================

import sys, glob, os, random, shutil, time
from flask import Flask, request, redirect, url_for
import numpy as np
import urllib, traceback

data_path = "data_"
parameter_path = "parameter_"


class CLIError(Exception):
    '''Generic exception to raise and log different fatal errors.'''

    def __init__(self, msg):
        super(CLIError).__init__(type(self))
        self.msg = "E: %s" % msg

    def __str__(self):
        return self.msg

    def __unicode__(self):
        return self.msg


def model_run(port, parameter_file, need_reload, use_cpu, debug, queue):
    print 'beginin model_run'
    from singa import device
    #prepare data files
    file_prepare(need_reload)

    import network as net
    model = net.create()

    #load parameter
    parameter_file = get_parameter(parameter_file)

    if parameter_file:
        print "load parameter file: %s" % parameter_file
        model.load(parameter_file)

    if use_cpu:
        raise CLIError("Currently cpu is not support!")
    else:
        print "runing with gpu"
        d = device.create_cuda_gpu()

    model.to_device(d)

    print "runing singa in train mode"
    global trainer
    from model import Trainer
    trainer = Trainer(model, d)
    if not parameter_file:
        trainer.initialize()
    trainer.train(queue)

    return 0


def file_prepare(reload_data=False):
    '''
        download all files and generate data.py
    '''
    if not reload_data and os.path.exists("data_.py"):
        return

    print "download file"
    #clean data
    shutil.rmtree("data_.py", ignore_errors=True)
    shutil.rmtree("data_", ignore_errors=True)

    data_py = open("data_.py", 'w')
    data_py.write("#%s" %
                  "This file is Generated by SINGA, please don't edit\n\n")

    link = 'https://www.cs.toronto.edu/~kriz/cifar-10-python.tar.gz'
    name = 'data_file'
    #download files
    path = download_file(link, data_path)
    data_py.write("%s=\"%s\"\n" % (name, path))

    data_py.flush()
    data_py.close()


def download_file(path, dest):
    '''
    download one file to dest
    '''
    if not os.path.exists(dest):
        os.makedirs(dest)
    if (path.startswith('http')):
        file_name = path.split('/')[-1]
        target = os.path.join(dest, file_name)
        urllib.urlretrieve(path, target)
    return target


def get_parameter(file_name=None):
    '''
    get the paticular file name or get the last parameter file
    '''
    if not os.path.exists(parameter_path):
        os.makedirs(parameter_path)
        return

    if file_name:
        return os.path.join(parameter_path, file_name)

    parameter_list = [os.path.join(parameter_path, f)
                      for f in os.listdir(parameter_path)]
    if len(parameter_list) == 0:
        return
    parameter_list.sort()

    return parameter_list[-1]
